#include<iostream>
#include<unordered_map>
#include<vector>
#include"SM3Achieve.h"
using namespace std;

class SM3EncryptFunction {
private:
    string iv = "7380166F4914B2B9172442D7DA8A0600A96F30BC163138AAE38DEE4DB0FB0E4E";
    uint32_t Ti[2] = { 0x79cc4519, 0x7a879d8a };
    string get_index = "0123456789ABCDEF";
    uint32_t* arr = new uint32_t[68];
    uint32_t* arr1 = new uint32_t[64];
protected:
    int hex2int(char p) {                       // hex 转 int 
        return p < 58 ? p - 48 : p - 55;
    }
    uint32_t str2uint(string s) {
        uint32_t temp = 0;
        for (auto i : s)
            temp = ((temp << 4) | hex2int(i));
        return temp;
    }
    string uint2str(uint32_t num, int k = 8, string s = "") {    // unsigned int 转 string
        for (int i = 0; i < k; i++, num /= 16)
            s += get_index[num % 16];
        return string(s.rbegin(), s.rend());
    }
    uint32_t GetLeftShift(uint32_t num, int left) {             // 循环左移
        return (num << left) | (num >> (32 - left));
    }
    uint32_t GetTi(int x) {
        return x > 15 ? Ti[1] : Ti[0];
    }
    uint32_t FunctionFFi(uint32_t x, uint32_t y, uint32_t z, int n) {
        return n > 15 ? ((x & y) | (y & z) | (x & z)) : (x ^ y ^ z);
    }
    uint32_t FunctionGGi(uint32_t x, uint32_t y, uint32_t z, int n) {
        return n > 15 ? ((x & y) | ((~x) & z)) : (x ^ y ^ z);
    }
    uint32_t IntendP(uint32_t x) {
        return (x ^ GetLeftShift(x, 9) ^ GetLeftShift(x, 17));
    }
    uint32_t ExtendP(uint32_t x) {
        return (x ^ GetLeftShift(x, 15) ^ GetLeftShift(x, 23));
    }
    int AddEndOfMessage(string& s, int n, uint64_t size) {
        s.push_back('8');
        for (int i = 0; i < n / 4; i++)
            s.push_back('0');
        s += uint2str(size, 16);
        return n;
    }
    void MessageExtend(string B) {
        for (int i = 0; i < 16; i++) 
            arr[i] = str2uint(B.substr(8 * i, 8));
        for (int i = 16; i < 68; i++) 
            arr[i] = (ExtendP(arr[i - 16] ^ arr[i - 9] ^ GetLeftShift(arr[i - 3], 15)) ^ GetLeftShift(arr[i - 13], 7) ^ arr[i - 6]);
        for (int i = 0; i < 64; i++)
            arr1[i] = (arr[i] ^ arr[i + 4]);
    }
    string FunctionCF(string V, string Bi) {
        uint32_t vi[8], vi_copy[8];
        for (int i = 0; i < 8; i++) {
            vi[i] = str2uint(V.substr(8 * i, 8));
            vi_copy[i] = vi[i];
        }
        for (int i = 0; i < 64; i++) {
            uint32_t SS1 = GetLeftShift((GetLeftShift(vi[0], 12) + vi[4] + GetLeftShift(GetTi(i), i % 32)), 7);
            uint32_t SS2 = (SS1 ^ GetLeftShift(vi[0], 12));
            uint32_t TT1 = FunctionFFi(vi[0], vi[1], vi[2], i) + vi[3] + SS2 + arr1[i];
            uint32_t TT2 = FunctionGGi(vi[4], vi[5], vi[6], i) + vi[7] + SS1 + arr[i];
            vi[3] = vi[2]; vi[2] = (GetLeftShift(vi[1], 9)); vi[1] = vi[0];
            vi[0] = TT1; vi[7] = vi[6]; vi[6] = GetLeftShift(vi[5], 19); vi[5] = vi[4]; vi[4] = IntendP(TT2);
        }
        string result = "";
        for (int i = 0; i < 8; i++) 
            result += uint2str(vi_copy[i] ^ vi[i]);
        return result;
    }
public:
    string SM3Encrypt(string m) {
        uint64_t size = (uint64_t)m.size() * (uint64_t)4;
        uint64_t num = (size + 1) % 512;
        int k = AddEndOfMessage(m, num < 448 ? 448 - num : 960 - num, size);
        uint64_t group_number = (size + 65 + k) / 512;
        string* B = new string[group_number];
        string* V = new string[group_number + 1];
        V[0] = iv;
        for (int i = 0; i < group_number; i++) {
            B[i] = m.substr(128 * i, 128);
            MessageExtend(B[i]);
            V[i + 1] = FunctionCF(V[i], B[i]);
        }
        return V[group_number];
    }
};


class SM3Attack :public SM3EncryptFunction {
public:
    string output;
    string input;
    SM3EncryptFunction SM3Test;
    SM3Attack(string salt, string message) {
        this->input = salt + message;
        this->output = SM3Test.SM3Encrypt(input);
    }

    bool lengthAttack() {
        string lengthExtend, temp;
        string outputTemp = output;
        do {
            lengthExtend = to_string(rand());
            outputTemp += lengthExtend;
            temp = SM3Test.SM3Encrypt(outputTemp);
            if (temp == output) return true;
        } while (true);
        
    }
};

class TreeNode {
public:
	TreeNode* leftChild, * rightChild, * brother, * parent;
	string val;
public:
    TreeNode() :val(""), leftChild(nullptr), rightChild(nullptr), brother(nullptr), parent(nullptr) {}
	TreeNode(string val) :val(val), leftChild(nullptr), rightChild(nullptr), brother(nullptr), parent(nullptr) {}
};

class MerkleTree {
public:
    vector<TreeNode*>MerkleTreeLeafHashNum;
    vector<TreeNode*>MerkleTreeLeafHashTemp;
    unordered_map<string, TreeNode*>table;
    SM3EncryptFunction SM3Test;
    string hashHead;
    int count;
protected:
public:
	MerkleTree(int num) {
        count = num;
        hashHead = "";
        for (int i = 0; i < num; ++i) {
            TreeNode* temp = new TreeNode(SM3Test.SM3Encrypt(to_string(i)));
            MerkleTreeLeafHashNum.push_back(temp);
            table.insert({ to_string(i),temp });
        }
	}

	void MerkleTreeCreate() {
        while (count > 1) {
            for (int i = 0; i < count - 1; i += 2) {
                TreeNode* temp = new TreeNode(SM3Test.SM3Encrypt(MerkleTreeLeafHashNum[i]->val + MerkleTreeLeafHashNum[i + 1]->val));
                temp->leftChild = MerkleTreeLeafHashNum[i];
                temp->rightChild = MerkleTreeLeafHashNum[i + 1];
                MerkleTreeLeafHashNum[i]->brother = MerkleTreeLeafHashNum[i + 1];
                MerkleTreeLeafHashNum[i + 1]->brother = MerkleTreeLeafHashNum[i];
                MerkleTreeLeafHashNum[i]->parent = temp;
                MerkleTreeLeafHashNum[i + 1]->parent = temp;
                MerkleTreeLeafHashTemp.push_back(temp);
            }
            if (count & 1) 
                MerkleTreeLeafHashTemp.push_back(MerkleTreeLeafHashNum[count++ - 1]);
            
            count /= 2;
            
            MerkleTreeLeafHashNum = MerkleTreeLeafHashTemp;
            MerkleTreeLeafHashTemp.clear();
        }
        hashHead = MerkleTreeLeafHashNum[0]->val;
	}

	bool MerkleTreeCheck(string hashNum){
        if (!table.count(hashNum)) return 0;
        TreeNode* head = table[hashNum];
        string result = head->val;
        while (head->parent) {
            if (head->brother != nullptr)
                result = SM3Test.SM3Encrypt(result + head->brother->val);
            head = head->parent;
        }
        return hashHead == head->val;
    }
};

int re = 0;
void a(int num,int target, int last) {
    if (target > num) return;
    if (target == num) {
        re++; return;
    }
    for (int i = last; i <= num; i += 2) {
        a(num, target + i, last);
    }
}

int main() {
    MerkleTree Tree(15);
    Tree.MerkleTreeCreate();
    for (int i = 0; i <= 17; ++i)
        cout << Tree.MerkleTreeCheck(to_string(i))<<endl;    
}
